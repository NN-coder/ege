#!!! Перед началом проверить наличие искомого символа в фале поиском текстового редактора !!!

# ----------------------------------------------------------------------------------------------------
# В текстовом файле1 k7-0.txt находится цепочка из символов латинского алфавита A, B, C. Найдите длину самой длинной
# подцепочки, состоящей из символов C.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7-0.txt', 'r') as F:
  s = F.readline()
maxLen, curLen = 1, 1
for i in range(1, len(s)):
  if s[i] == 'C' and s[i] == s[i-1]:
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 1
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7a-1.txt находится цепочка из символов латинского алфавита A, B, C, D, E. Найдите длину самой длинной
# подцепочки, состоящей из символов A, B или C (в произвольном порядке).
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7a-1.txt', 'r') as F:
  s = F.readline()
maxLen, curLen = 1, 1
for i in range(1, len(s)):
  if s[i] in 'ABC' and s[i-1] in 'ABC':
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 1
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7a-5.txt находится цепочка из символов латинского алфавита A, B, C, D, E, F. Найдите длину самой длинной
# подцепочки, не содержащей символов C и F.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7a-5.txt', 'r') as F:
  s = F.readline()
maxLen, curLen = 1, 1
for i in range(1, len(s)):
  if not(s[i] in 'CF') and not(s[i-1] in 'CF'):
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 1
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7b-1.txt находится цепочка из символов латинского алфавита A, B, C, D, E. Найдите максимальную длину
# цепочки вида EABEABEABE... (состоящей из фрагментов EAB, последний фрагмент может быть неполным).
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7b-1.txt', 'r') as F:
  s = F.readline()
maxLen, curLen = 0, 0
count = 0
for i in range(len(s)):
  if (count % 3 == 0 and s[i] == 'E' or
      count % 3 == 1 and s[i] == 'A' or
      count % 3 == 2 and s[i] == 'B'
  ):
    curLen += 1
    count += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 0
    count = 0
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7b-3.txt находится цепочка из символов латинского алфавита A, B, C, D, E, F. Найдите максимальную длину
# цепочки вида BAFEBAFEBAFE...
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7b-3.txt', 'r') as F:
  s = F.readline()
maxLen, curLen = 0, 0
count = 0
for i in range(len(s)):
  if (count % 4 == 0 and s[i] == 'B' or
      count % 4 == 1 and s[i] == 'A' or
      count % 4 == 2 and s[i] == 'F' or
      count % 4 == 3 and s[i] == 'E'
  ):
    curLen += 1
    count += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 0
    count = 0
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7c-1.txt находится цепочка из символов латинского алфавита A, B, C, D, E. Найдите количество цепочек
# длины 3, удовлетворяющих следующим условиям:
# - 1-й символ – один из символов B, C или D;
# - 2-й символ – один из символов B, D, E, который не совпадает с первым;
# - 3-й символ – один из символов B, C, E, который не совпадает со вторым.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7c-1.txt', 'r') as F:
  s = F.readline()
count = 0
for i in range(len(s) - 2):
  if (s[i] in 'BCD' and
      s[i+1] in 'BDE' and s[i+1] != s[i] and
      s[i+2] in 'BCE' and s[i+2] != s[i+1]
  ):
    count += 1
print(count)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7c-4.txt находится цепочка из символов латинского алфавита A, B, C, D, E, F. Найдите количество цепочек
# длины 3, удовлетворяющих следующим условиям: 
# - 3-й символ – один из C, D, F; 
# - 1-й символ – один из A, D, F, который не совпадает с третьим; 
# - 2-й символ – один из C, D, F, который не совпадает с третьим.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7c-4.txt', 'r') as F:
  s = F.readline()
count = 0
for i in range(len(s) - 2):
  if (s[i+2] in 'CDF' and
      s[i] in 'ADF' and s[i] != s[i+2] and
      s[i+1] in 'CDF' and s[i+1] != s[i+2]
  ):
    count += 1
print(count)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7c-5.txt находится цепочка из символов латинского алфавита A, B, C, D, E, F. Найдите количество
# цепочек длины 5, в которых соседние символы не совпадают.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7c-5.txt', 'r') as F:
  s = F.readline()
count = 0
for i in range(len(s) - 4):
  if (s[i] != s[i+1] and
      s[i+1] != s[i+2] and
      s[i+2] != s[i+3] and
      s[i+3] != s[i+4]
  ):
    count += 1
print(count)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7-m21.txt находится цепочка из прописных (заглавных) символов латинского алфавита A, B, C, D, E, F.
# Найдите количество подцепочек из трех символов, в которых символы идут в алфавитном порядке и номер начала последней
# найденной подцепочки (первый символ исходной цепочки имеет номер 0). Например, у цепочки ABCDF таких подцепочек три:
# ABC, BCD и CDF, а номер начала последней найденной подцепочки (CDF) два и, следовательно, ответ: 3 2.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7-m21.txt', 'r') as F:
  s = F.readline()
count, number = 0, 0
for i in range(len(s) - 2):
  if s[i] < s[i+1] < s[i+2]:
    count += 1
    number = i
print(count, number)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k7-m25.txt находится цепочка из прописных (заглавных) символов латинского алфавита A, B, C, D, E, F.
# Найдите количество подцепочек из трех символов, в которых средний символ ближе к концу алфавита, чем символ слева и
# справа от него, а также найдите номер начала последней найденной подцепочки (первый символ исходной цепочки имеет номер 0).
# Например, у цепочки ACBFAED таких подцепочек три: ACB, BFA и AED, а номер начала последней найденной подцепочки (AED)
# четыре и, следовательно, ответ: 3 4.
# ----------------------------------------------------------------------------------------------------
with open('k7data/k7-m25.txt', 'r') as F:
  s = F.readline()
count, number = 0, 0
for i in range(len(s) - 2):
  if s[i+1] > s[i] and s[i+1] > s[i+2]:
    count += 1
    number = i
print(count, number)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k8-4.txt находится цепочка из символов, в которую могут входить заглавные буквы латинского алфавита
# A…Z и десятичные цифры. Найдите длину самой длинной подцепочки, состоящей из одинаковых символов. Если в файл несколько
# цепочек одинаковой длины, нужно взять первую из них. Выведите сначала символ, из которого строится эта подцепочка, а
# затем через пробел – длину этой подцепочки. 
# ----------------------------------------------------------------------------------------------------
with open('k8data/k8-4.txt', 'r') as F:
  s = F.readline()
curLen, maxLen = 1, 1
maxSymb = s[0]
for i in range(1, len(s)):
  if s[i] == s[i-1]:
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
      maxSymb = s[i]
  else:
    curLen = 1
print(maxSymb, maxLen)

# ----------------------------------------------------------------------------------------------------
# В текстовом файле k8-0.txt находится цепочка из символов, в которую могут входить заглавные буквы латинского алфавита
# A…Z и десятичные цифры. Найдите длину самой длинной подцепочки, состоящей из одинаковых символов. Если в файле несколько
# подходящих цепочек одинаковой длины, нужно взять первую из них. Для каждой цепочки максимальной длины выведите в
# отдельной строке сначала символ, из которого строится эта цепочка, а затем через пробел – длину этой цепочки.
# ----------------------------------------------------------------------------------------------------
with open('k8data/k8-0.txt', 'r') as F:
  s = F.readline()
candidates = [[s[0], 1]]
curLen = 1
for i in range(1, len(s)):
  if s[i] == s[i-1]:
    curLen += 1
    if curLen > candidates[0][1]:
      candidates = [[s[i], curLen]]
    elif curLen == candidates[0][1]:
      candidates.append([s[i], curLen])
  else:
    curLen = 1
for candidate in candidates:
  print(candidate[0], candidate[1])

# ----------------------------------------------------------------------------------------------------
# Текстовый файл k8-1.txt состоит не более чем из 106 символов. Определите максимальное количество идущих подряд символов,
# среди которых каждые два соседних различны.
# ----------------------------------------------------------------------------------------------------
with open('k8data/k8-1.txt', 'r') as F:
  s = F.readline()
curLen, maxLen = 1, 1
for i in range(1, len(s)):
  if s[i] != s[i-1]:
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 1
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# Текстовый файл 24-1.txt состоит не более чем из 106 символов. Определите максимальное нечётное число,
# записанное в этом файле.
# ----------------------------------------------------------------------------------------------------
with open('24-1.txt', 'r') as F:
  s = F.readline()
curNum, maxNum = '', 0
for i in range(len(s)):
  if s[i] in '1234567890':
    curNum += s[i]
  else:
    if curNum:
      if int(curNum) > maxNum and int(curNum) % 2 != 0:
        maxNum = int(curNum)
    curNum = ''
print(maxNum)

# ----------------------------------------------------------------------------------------------------
# Текстовый файл 24-1.txt состоит не более чем из 106 символов. Определите самое большое число, состоящее
# только из нечётных цифр.
# ----------------------------------------------------------------------------------------------------
with open('24-1.txt', 'r') as F:
  s = F.readline()
curNum, maxNum = '', 0
for i in range(len(s)):
  if s[i] in '13579':
    curNum += s[i]
  else:
    if curNum:
      if int(curNum) > maxNum:
        maxNum = int(curNum)
    curNum = ''
print(maxNum)

# ----------------------------------------------------------------------------------------------------
# Текстовый файл 24.txt содержит последовательность из строчных и заглавных букв английского алфавита и цифр, всего не
# более 106 символов. Определите длину наибольшей возрастающей подпоследовательности.
# ----------------------------------------------------------------------------------------------------
with open('24.txt', 'r') as F:
  s = F.readline()
curLen, maxLen = 1, 1
for i in range(1, len(s)):
  if s[i] > s[i-1]:
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
  else:
    curLen = 1
print(maxLen)

# ----------------------------------------------------------------------------------------------------
# Текстовый файл 24.txt содержит последовательность из строчных и заглавных букв английского алфавита и цифр, всего не
# более 106 символов. Запишите в ответе наибольшую возрастающую подпоследовательность.
# ----------------------------------------------------------------------------------------------------
with open('24-1.txt', 'r') as F:
  s = F.readline()
curSubsequence, maxSubsequence = s[0], s[0]
for i in range(1, len(s)):
  if s[i] > s[i-1]:
    curSubsequence += s[i]
    if len(curSubsequence) > len(maxSubsequence):
      maxSubsequence = curSubsequence
  else:
    curSubsequence = s[i]
print(maxSubsequence)

# ----------------------------------------------------------------------------------------------------
# Текстовый файл 24.txt содержит последовательность из строчных и заглавных букв английского алфавита и цифр, всего не
# более 106 символов. Запишите в ответе номер символа, с которого начинается наибольшая возрастающая подпоследовательность.
# Нумерация символов начинается с 1.
# ----------------------------------------------------------------------------------------------------
with open('24.txt', 'r') as F:
  s = F.readline()
curLen, maxLen = 1, 1
curSymbNum, maxSymbNum = 1, 1
for i in range(1, len(s)):
  if s[i] > s[i-1]:
    curLen += 1
    if curLen > maxLen:
      maxLen = curLen
      maxSymbNum = curSymbNum
  else:
    curLen = 1
    curSymbNum = i + 1
print(maxSymbNum)
